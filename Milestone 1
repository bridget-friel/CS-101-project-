def dna_count(dna):
    count_A = 0
    count_C = 0
    count_G = 0
    count_T = 0
    dna = dna_upper
    for letter in dna:
        if letter == "A":
            count_A = count_A + 1
        elif letter == "C":
            count_C = count_C + 1
        elif letter == "G":
            count_G = count_G + 1
        elif letter == "T":
            count_T == count_T + 1
        else:
            print("Invalid input")
    return (count_A, count_C, count_G, count_T)

def dna2rna(dna):
    dna = dna.upper() #make dna strign uppercase
    rna = dna.replace('T', 'U') #replacing T with U in dna to get rna
    return rna
 
#finding the complement string of a given DNA string
def reverse_complement(dna):
    #reverse dna string
    dna_reverse = dna[::-1]
    dna_complement = ''
    #each letter in the reverse string is replaced with complement letter
    #all is added to a new string (dna_complement)
    for symbol in dna_reverse:
        if symbol == 'A':
            dna_complement += 'T'
        elif symbol == 'T':
            dna_complement += 'A'
        elif symbol == 'C':
            dna_complement += 'G'
        else:
            dna_complement += 'C'
    return dna_complement

def fact(n):
        res = 1;

        for i in range(2, n+1):
                res = res*i
        return res


def comb(n, k):
        return (fact(n)/(fact(n-k)*fact(k)))



def mendels_law(hom, het, rec):
        """
                According to Mendel's Law
                Probability of Dominant(Hom, Hom) = 1;
                Probability of Dominant(Hom, Het) = 1;
                Probability of Dominant(Hom, Rec) = 1;
                Probability of Dominant(Het, Het) = 0.75;
                Probability of Dominant(Het, Rec) = 0.5;
                Probability of Dominant(Rec, Rec) = 0;
                
                Now Probability that off spring of two randomly
                selected allele will be dominant is
                (1*comb(hom, 2) + 1*(comb(hom, 1)*comb(het, 1)) + 1*(comb(hom, 1)*comb(rec, 1)) 
                + 0.75*(comb(het, 2)) + 0.5*(comb(rec, 1)*comb(het, 1)) + 0*comb(rec, 2))/ comb(hom+het+rec, 2)
                = 
        """
        probability = 1*float(comb(hom, 2)) + 1*float(hom*het) + 1*float(hom*rec) + 0.75*float(comb(het, 2)) + 0.5*float(het*rec)


        probability = probability/float(comb(het+hom+rec, 2))

        return probability

print(mendels_law(2, 2, 2))

????????? question 5

GC_total = [] #creates list of Gs and Cs per index
def GC_content(dna_list):
    for index in range(len(dna_list)): #for each index in dna_list
        list_component = dna_list[index] 
        GC_total.append(list_component.count('C') + list_component.count('G')) #adds total of Gs and Cs to list
    max_GC = max(GC_total) 
    max_location = GC_total.index(max_GC) #finds the index where max_GC occurs
    length = len(dna_list[max_location])
    GC_fraction = float(((max_GC)/length)*100) #calculates percentage of Gs and Cs
    return (max_location, GC_fraction) #returns index and percentage

#turning an RNA sequence into an amino acid string
genetic_code = {
        'UUU': 'F', 'UUC': 'F', 'UUA': 'L', 'UUG': 'L',        'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L',
        'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M',        'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V',

        'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S',        'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P',
        'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T',        'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A',

        'UAU': 'Y', 'UAC': 'Y', 'CAU': 'H', 'CAC': 'H',        'CAA': 'Q', 'CAG': 'Q', 'AAU': 'N', 'AAC': 'N', 
        'AAA': 'K', 'AAG': 'K', 'GAU': 'D', 'GAC': 'D',        'GAA': 'E', 'GAG': 'E', 'UGU': 'C', 'UGC': 'C', 
        'UGG': 'W', 'CGU': 'R', 'CGC': 'R', 'CGA': 'R',        'CGG': 'R', 'AGU': 'S', 'AGC': 'S', 'AGA': 'R', 
        'AGG': 'R', 'GGU': 'G', 'GGC': 'G', 'GGA': 'G',        'GGG': 'G', 'UAA': '', 'UAG': '', 'UGA': '',
    }

#function that turns 3 letter codon to amino acid letter using gentic code dict
def rna_codon(triplet):
    return genetic_code.get(triplet)

#function that turns rna to amino acid string
def rna2codon(rna):
    amino_str = ''
    num_of_codon = int(len(rna)/3) #number of 3 letter codons
    for i in range(0, num_of_codon):
        triplet = rna[3*i:3*i+3] #takes every 3 letters of rna string
        amino_str += rna_codon(triplet) #adds amino acid to empyty string
        continue
    return amino_str

def locate_substring(dna_snippet,dna):
    indexes = [i for i in range(len(dna_snippet))if dna_snippet.startswith(dna,i)]
    return indexes
print(locate_substring("GATATATGCATATACTT","ATAT"))

def hamming_distance(dna1, dna2):
    dna1 = dna1.upper
    dna2 = dna2.upper
    distance = 0
    for i in range(len(dna1)):
        if dna1[i] == dna2[i]:
            continue
        else:
            distance = distance + 1
    return distance
 
prob = 0
def count_dom_phenotype(genotypes):
    for index in range(len(genotypes)):
        if index == 0:
            prob = genotypes[0]*2 #probability is 100%
        if index == 1:
            prob = prob + genotypes[1]*2  #probability is 100%
        if index == 2:
            prob = prob + genotypes[2]*2 #probability is 100%
        if index == 3:
            prob= prob + (genotypes[3]*2*.75) #probability is 75%
        if index == 4:
            prob= prob + genotypes[4]*2*.5 #probability is 50%
        if index == 5:
            prob = prob + 0 #probability is 0%
    return prob
    
#Possible number of RNA sequences from protein string
#function counts the number of keys that have the same value
def amino_frequencies():
    frequencies= {}
    for a in genetic_code.values(): #takes each value in genetic_code dict as key
        if a in frequencies:
            frequencies[a]+= 1
        else: 
            frequencies[a]=1
    return frequencies #returns number of multiplicities of each key (amino acid)

def source_rna(protein):
    split_protein= list(protein) #separate protein into individual letters
    frequencies= amino_frequencies()
    n= frequencies[''] #starts with the number of stop codons since it is not included in amino string
    for i in range(0,len(split_protein)):
        n= n*frequencies[split_protein[i]] #each value corresponding to its key is multiplied together
    return n

def splice_rna (dna, intron_list):
    #transcribe from dna to rna
    exons= dna #exons will be the remaining segments of dna
    codons=''

    

    #we will try for each intron if it is present then we will try to remove that particular string
    
    for i in range(0,len(intron_list)):
        exons= exons.replace (intron_list[i],"") #removes segments of dna in intron_list
    rna = dna2rna(exons)     #transcribes to rna
    codons= rna2codon(rna) # transcribes rna to proteins
    return codons
